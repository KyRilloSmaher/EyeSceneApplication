// <auto-generated />
using System;
using EyeScenceApp.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EyeScenceApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("code")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("AwardedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PosterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PosterId")
                        .IsUnique();

                    b.ToTable("Awards");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.CelebirtyAwards", b =>
                {
                    b.Property<Guid>("AwardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Celebirtyid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("AwardId", "Celebirtyid");

                    b.HasIndex("Celebirtyid");

                    b.ToTable("CelebirtyAwardsJoin");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.CelebirtyImages", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("CelebirtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.HasKey("ImageId", "CelebirtyId");

                    b.HasIndex("CelebirtyId");

                    b.ToTable("CelebirtyImages");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Celebrity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Celebrities");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("CountryOfOrigin")
                        .HasColumnType("int");

                    b.Property<int>("DurationByMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("PosterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PosterId");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UploadingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PosterId")
                        .IsUnique();

                    b.ToTable("DigitalContents", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContentAwards", b =>
                {
                    b.Property<Guid>("AwardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DigitalContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("AwardId", "DigitalContentId");

                    b.HasIndex("DigitalContentId");

                    b.ToTable("DigitalContentAwardsJoin");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContentGenres", b =>
                {
                    b.Property<byte>("GenreId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("DigitalContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GenreId", "DigitalContentId");

                    b.HasIndex("DigitalContentId");

                    b.ToTable("DigitalContentGenres");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("DurationByMinutes")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("posterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.HasIndex("posterId")
                        .IsUnique();

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Favorite", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DigitalContentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "DigitalContentId");

                    b.HasIndex("DigitalContentId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Genre", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PosterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PosterId")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.MovieCast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DigitalContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("DigitalContentId");

                    b.ToTable("MovieCasts");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DigitalContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DislikesCount")
                        .HasColumnType("int");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DigitalContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.WatchList", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DigitalContentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "DigitalContentId");

                    b.HasIndex("DigitalContentId");

                    b.ToTable("WatchLists");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.WorksOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CrewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DigitalContentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("DigitalContentId");

                    b.ToTable("WorksOn");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.CelebirtyAward", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Award");

                    b.ToTable("CelebirtyAward", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContentAward", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Award");

                    b.ToTable("DigitalContentAward", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Cast", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Celebrity");

                    b.ToTable("Casts", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Crew", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Celebrity");

                    b.ToTable("Crews", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Movie", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.DigitalContent");

                    b.Property<int>("Revenues")
                        .HasColumnType("int");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Series", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.DigitalContent");

                    b.Property<int>("EpisodesCount")
                        .HasColumnType("int");

                    b.Property<int>("SeasonsCount")
                        .HasColumnType("int");

                    b.ToTable("Series", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.SingleDocumentary", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.DigitalContent");

                    b.ToTable("SingleDocumentary", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Actor", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Cast");

                    b.Property<int>("ActingStyle")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentlyActive")
                        .HasColumnType("bit");

                    b.Property<int>("TotalMovies")
                        .HasColumnType("int");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Director", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Crew");

                    b.Property<int>("DirectedMoviesCount")
                        .HasColumnType("int");

                    b.Property<string>("VisionStatement")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("Directors", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Editor", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Crew");

                    b.Property<int>("EditedProjectsCount")
                        .HasColumnType("int");

                    b.Property<int>("EditingTechniques")
                        .HasColumnType("int");

                    b.ToTable("Editors", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Producer", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Crew");

                    b.Property<int>("ProducedProjectsCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalBoxOfficeRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Producers", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.SoundDesigner", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Crew");

                    b.Property<string>("KnownForSoundtracks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("SoundDesigners", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Writer", b =>
                {
                    b.HasBaseType("EyeScenceApp.Domain.Entities.Crew");

                    b.Property<bool>("IsScreenwriter")
                        .HasColumnType("bit");

                    b.Property<int>("WritingStyle")
                        .HasColumnType("int");

                    b.ToTable("Writers", (string)null);
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Award", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Image", "Image")
                        .WithOne("award")
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Award", "PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.CelebirtyAwards", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.CelebirtyAward", "Award")
                        .WithMany("celebirties")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.Celebrity", "Celebrity")
                        .WithMany("Awards")
                        .HasForeignKey("Celebirtyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("Celebrity");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.CelebirtyImages", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Celebrity", "Celebrity")
                        .WithMany("Images")
                        .HasForeignKey("CelebirtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.Image", "Image")
                        .WithMany("CelebirtyImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Celebrity");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContent", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Image", "Image")
                        .WithOne("DigitalContent")
                        .HasForeignKey("EyeScenceApp.Domain.Entities.DigitalContent", "PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContentAwards", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContentAward", "Award")
                        .WithMany("DigitalContents")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", "DigitalContent")
                        .WithMany("Awards")
                        .HasForeignKey("DigitalContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("DigitalContent");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContentGenres", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", "DigitalContent")
                        .WithMany("Genres")
                        .HasForeignKey("DigitalContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.Genre", "Genre")
                        .WithMany("contents")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DigitalContent");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Episode", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.Image", "poster")
                        .WithOne("Episode")
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Episode", "posterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("poster");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", "DigitalContent")
                        .WithMany("FavoriteMovies")
                        .HasForeignKey("DigitalContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DigitalContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Genre", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Image", "Image")
                        .WithOne("genre")
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Genre", "PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.MovieCast", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Actor", "Actor")
                        .WithMany("MovieCasts")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", "DigitalContent")
                        .WithMany("MovieCasts")
                        .HasForeignKey("DigitalContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("DigitalContent");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Rate", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", "DigitalContent")
                        .WithMany("Ratings")
                        .HasForeignKey("DigitalContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Rates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DigitalContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.ApplicationUser", "user")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.WatchList", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", "DigitalContent")
                        .WithMany("WatchListMovies")
                        .HasForeignKey("DigitalContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("WatchLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DigitalContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.WorksOn", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Crew", "Crew")
                        .WithMany("WorksOn")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", "DigitalContent")
                        .WithMany("WorksOn")
                        .HasForeignKey("DigitalContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("DigitalContent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeScenceApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.CelebirtyAward", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Award", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.CelebirtyAward", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContentAward", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Award", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.DigitalContentAward", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Cast", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Celebrity", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Cast", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Crew", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Celebrity", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Crew", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Movie", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Movie", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Series", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Series", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.SingleDocumentary", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.DigitalContent", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.SingleDocumentary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Actor", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Cast", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Actor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Director", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Crew", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Director", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Editor", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Crew", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Editor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Producer", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Crew", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Producer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.SoundDesigner", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Crew", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.SoundDesigner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Writer", b =>
                {
                    b.HasOne("EyeScenceApp.Domain.Entities.Crew", null)
                        .WithOne()
                        .HasForeignKey("EyeScenceApp.Domain.Entities.Writer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Rates");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("WatchLists");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Celebrity", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContent", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("FavoriteMovies");

                    b.Navigation("Genres");

                    b.Navigation("MovieCasts");

                    b.Navigation("Ratings");

                    b.Navigation("WatchListMovies");

                    b.Navigation("WorksOn");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Genre", b =>
                {
                    b.Navigation("contents");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Image", b =>
                {
                    b.Navigation("CelebirtyImages");

                    b.Navigation("DigitalContent")
                        .IsRequired();

                    b.Navigation("Episode")
                        .IsRequired();

                    b.Navigation("award")
                        .IsRequired();

                    b.Navigation("genre")
                        .IsRequired();
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.CelebirtyAward", b =>
                {
                    b.Navigation("celebirties");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.DigitalContentAward", b =>
                {
                    b.Navigation("DigitalContents");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Crew", b =>
                {
                    b.Navigation("WorksOn");
                });

            modelBuilder.Entity("EyeScenceApp.Domain.Entities.Actor", b =>
                {
                    b.Navigation("MovieCasts");
                });
#pragma warning restore 612, 618
        }
    }
}
